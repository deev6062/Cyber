import os
import time
import hashlib
import requests
import shutil
import subprocess
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from win10toast import ToastNotifier

# VirusTotal API Key (Replace with your own API Key)
VIRUSTOTAL_API_KEY = '117f8adde080a27380d11a2cea0f00a3c4b32ac413d0a2e41916deb5da710060'  # Replace with your actual API key

# Configuration
QUARANTINE_FOLDER = 'quarantine'

# Ensure quarantine folder exists
if not os.path.exists(QUARANTINE_FOLDER):
    os.makedirs(QUARANTINE_FOLDER)

# Setup toaster for notifications
toaster = ToastNotifier()

# VirusTotal check function
def check_virus_total(file_hash):
    url = f"https://www.virustotal.com/vtapi/v2/file/report"
    params = {"apikey": VIRUSTOTAL_API_KEY, "resource": file_hash}
    response = requests.get(url, params=params)

    if response.status_code == 200:
        json_response = response.json()
        if json_response["response_code"] == 1:
            positives = json_response["positives"]
            total = json_response["total"]
            return positives > 0, positives, total
        return False, 0, 0
    else:
        print("Error connecting to VirusTotal")
        return False, 0, 0

# File hashing function
def get_file_hash(file_path):
    hash_func = hashlib.sha256()
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            hash_func.update(chunk)
    return hash_func.hexdigest()

# Quarantine function
def quarantine_file(file_path):
    filename = os.path.basename(file_path)
    quarantine_path = os.path.join(QUARANTINE_FOLDER, filename)
    shutil.move(file_path, quarantine_path)
    toaster.show_toast("USB Malware Detection", f"Quarantined: {filename}", duration=5)
    print(f"Quarantined: {file_path}")

# Fault detection using chkdsk (Windows only)
def check_drive_for_faults(drive_path):
    result = subprocess.run(['chkdsk', drive_path], capture_output=True)
    output = result.stdout.decode()
    return "no problems" not in output.lower()

# USB file event handler
class USBEventHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if event.is_directory:
            return
        try:
            self.scan_file(event.src_path)
        except Exception as e:
            print(f"Error scanning file: {e}")

    def scan_file(self, file_path):
        file_hash = get_file_hash(file_path)
        
        # Check for virus using VirusTotal
        is_malicious, positives, total = check_virus_total(file_hash)
        if is_malicious:
            print(f"VirusTotal: {positives}/{total} scanners flagged the file as malicious.")
            quarantine_file(file_path)
            return
        
        print(f"File {file_path} is clean.")

def monitor_usb(drive_path):
    event_handler = USBEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path=drive_path, recursive=True)
    observer.start()
    print(f"Monitoring USB drive: {drive_path}")
    toaster.show_toast("USB Malware Detection", f"Monitoring USB drive: {drive_path}", duration=5)
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

# Alternative USB detection using drive checking
def check_for_new_usb(drive_letters):
    while True:
        current_drives = set(f"{d}:\\" for d in "ABCDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\"))
        new_drives = current_drives - drive_letters
        
        if new_drives:
            for drive in new_drives:
                print(f"New USB detected: {drive}")
                drive_letters.add(drive)
                
                if check_drive_for_faults(drive):
                    print(f"Fault detected on USB drive: {drive}")
                    toaster.show_toast("USB Malware Detection", "Fault detected on USB drive!", duration=5)
                else:
                    print(f"USB drive {drive} is healthy.")
                
                try:
                    monitor_usb(drive)
                except Exception as e:
                    print(f"Error monitoring USB: {e}")
        
        time.sleep(5)  # Check every 5 seconds

def main():
    detected_drives = set()
    check_for_new_usb(detected_drives)

if __name__ == "__main__":
    main()
